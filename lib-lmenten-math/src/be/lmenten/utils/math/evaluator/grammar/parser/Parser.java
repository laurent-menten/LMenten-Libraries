/* This file was generated by SableCC (http://www.sablecc.org/). */

package be.lmenten.utils.math.evaluator.grammar.parser;

import be.lmenten.utils.math.evaluator.grammar.lexer.*;
import be.lmenten.utils.math.evaluator.grammar.node.*;
import be.lmenten.utils.math.evaluator.grammar.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PExp node1 = (PExp) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ASimpleExpression */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAssignVarExpression */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAssignObjExpression */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAddExp */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce ASubExp */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AEqualExp */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce ANotEqualExp */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce ALThanExp */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list);
            }
            break;
            case 8: /* reduce ALEqualExp */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list);
            }
            break;
            case 9: /* reduce AGThanExp */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list);
            }
            break;
            case 10: /* reduce AGEqualExp */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list);
            }
            break;
            case 11: /* reduce AAndExp */
            {
                ArrayList<Object> list = new11();
                push(goTo(1), list);
            }
            break;
            case 12: /* reduce AOrExp */
            {
                ArrayList<Object> list = new12();
                push(goTo(1), list);
            }
            break;
            case 13: /* reduce AXorExp */
            {
                ArrayList<Object> list = new13();
                push(goTo(1), list);
            }
            break;
            case 14: /* reduce AFactorExp */
            {
                ArrayList<Object> list = new14();
                push(goTo(1), list);
            }
            break;
            case 15: /* reduce AMulFactor */
            {
                ArrayList<Object> list = new15();
                push(goTo(2), list);
            }
            break;
            case 16: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new16();
                push(goTo(2), list);
            }
            break;
            case 17: /* reduce AModFactor */
            {
                ArrayList<Object> list = new17();
                push(goTo(2), list);
            }
            break;
            case 18: /* reduce AUnaryFactor */
            {
                ArrayList<Object> list = new18();
                push(goTo(2), list);
            }
            break;
            case 19: /* reduce ALiteralUnary */
            {
                ArrayList<Object> list = new19();
                push(goTo(3), list);
            }
            break;
            case 20: /* reduce AValueUnary */
            {
                ArrayList<Object> list = new20();
                push(goTo(3), list);
            }
            break;
            case 21: /* reduce AParenUnary */
            {
                ArrayList<Object> list = new21();
                push(goTo(3), list);
            }
            break;
            case 22: /* reduce AGetterUnary */
            {
                ArrayList<Object> list = new22();
                push(goTo(3), list);
            }
            break;
            case 23: /* reduce AFunc0Unary */
            {
                ArrayList<Object> list = new23();
                push(goTo(3), list);
            }
            break;
            case 24: /* reduce AFunc1Unary */
            {
                ArrayList<Object> list = new24();
                push(goTo(3), list);
            }
            break;
            case 25: /* reduce AFunc2Unary */
            {
                ArrayList<Object> list = new25();
                push(goTo(3), list);
            }
            break;
            case 26: /* reduce AFunc3Unary */
            {
                ArrayList<Object> list = new26();
                push(goTo(3), list);
            }
            break;
            case 27: /* reduce AInt2Literal */
            {
                ArrayList<Object> list = new27();
                push(goTo(4), list);
            }
            break;
            case 28: /* reduce AInt8Literal */
            {
                ArrayList<Object> list = new28();
                push(goTo(4), list);
            }
            break;
            case 29: /* reduce AInt10Literal */
            {
                ArrayList<Object> list = new29();
                push(goTo(4), list);
            }
            break;
            case 30: /* reduce AInt16Literal */
            {
                ArrayList<Object> list = new30();
                push(goTo(4), list);
            }
            break;
            case 31: /* reduce AFloatLiteral */
            {
                ArrayList<Object> list = new31();
                push(goTo(4), list);
            }
            break;
            case 32: /* reduce AFractionLiteral */
            {
                ArrayList<Object> list = new32();
                push(goTo(4), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ASimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAssignVarExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExp pexpNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);

        pexpNode1 = new AAssignVarExp(tidentifierNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAssignObjExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TObjIdentifier tobjidentifierNode2;
        PExp pexpNode3;
        tobjidentifierNode2 = (TObjIdentifier)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);

        pexpNode1 = new AAssignObjExp(tobjidentifierNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAddExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASubExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASubExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AEqualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ANotEqualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ANotEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ALThanExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALThanExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ALEqualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AGThanExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGThanExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AGEqualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AXorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AXorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AFactorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMulFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMulExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AUnaryFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ALiteralUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AValueUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpNode1 = new AValueExp(tidentifierNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AParenUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AParenExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AGetterUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TObjIdentifier tobjidentifierNode2;
        tobjidentifierNode2 = (TObjIdentifier)nodeArrayList1.get(0);

        pexpNode1 = new AGetterExp(tobjidentifierNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFunc0Unary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpNode1 = new AFunc0Exp(tidentifierNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFunc1Unary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExp pexpNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AFunc1Exp(tidentifierNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFunc2Unary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList5.get(0);

        pexpNode1 = new AFunc2Exp(tidentifierNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFunc3Unary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList5.get(0);
        pexpNode5 = (PExp)nodeArrayList7.get(0);

        pexpNode1 = new AFunc3Exp(tidentifierNode2, pexpNode3, pexpNode4, pexpNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AInt2Literal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInteger2 tinteger2Node2;
        tinteger2Node2 = (TInteger2)nodeArrayList1.get(0);

        pexpNode1 = new AInteger2Exp(tinteger2Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AInt8Literal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInteger8 tinteger8Node2;
        tinteger8Node2 = (TInteger8)nodeArrayList1.get(0);

        pexpNode1 = new AInteger8Exp(tinteger8Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AInt10Literal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInteger10 tinteger10Node2;
        tinteger10Node2 = (TInteger10)nodeArrayList1.get(0);

        pexpNode1 = new AInteger10Exp(tinteger10Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AInt16Literal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInteger16 tinteger16Node2;
        tinteger16Node2 = (TInteger16)nodeArrayList1.get(0);

        pexpNode1 = new AInteger16Exp(tinteger16Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AFloatLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        pexpNode1 = new AFloatExp(tfloatNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AFractionLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFraction tfractionNode2;
        tfractionNode2 = (TFraction)nodeArrayList1.get(0);

        pexpNode1 = new AFractionExp(tfractionNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 1}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 20}, {15, SHIFT, 16}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 10}, {29, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {3, SHIFT, 17}, {4, SHIFT, 18}, {5, SHIFT, 19}, {6, SHIFT, 20}, {7, SHIFT, 21}, {8, SHIFT, 22}, {9, SHIFT, 23}, {10, SHIFT, 24}, {11, SHIFT, 25}, {12, SHIFT, 26}, {13, SHIFT, 27}, {14, SHIFT, 28}, },
			{{-1, REDUCE, 14}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 15}, {3, SHIFT, 17}, {4, SHIFT, 18}, {5, SHIFT, 19}, {6, SHIFT, 20}, {7, SHIFT, 21}, {8, SHIFT, 22}, {9, SHIFT, 23}, {10, SHIFT, 24}, {11, SHIFT, 25}, {12, SHIFT, 26}, {13, SHIFT, 27}, {16, SHIFT, 32}, },
			{{-1, ERROR, 16}, {15, SHIFT, 1}, {16, SHIFT, 33}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 17}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 18}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 19}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 20}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 21}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 22}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 23}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 24}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 25}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 26}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 27}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 28}, {24, SHIFT, 46}, {25, SHIFT, 47}, },
			{{-1, ERROR, 29}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 30}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 31}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 34}, {3, SHIFT, 17}, {4, SHIFT, 18}, {5, SHIFT, 19}, {6, SHIFT, 20}, {7, SHIFT, 21}, {8, SHIFT, 22}, {9, SHIFT, 23}, {10, SHIFT, 24}, {11, SHIFT, 25}, {12, SHIFT, 26}, {13, SHIFT, 27}, {16, SHIFT, 51}, {17, SHIFT, 52}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 7}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 8}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 9}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 10}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 11}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 12}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 13}, {0, SHIFT, 29}, {1, SHIFT, 30}, {2, SHIFT, 31}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 52}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 53}, {3, SHIFT, 17}, {4, SHIFT, 18}, {5, SHIFT, 19}, {6, SHIFT, 20}, {7, SHIFT, 21}, {8, SHIFT, 22}, {9, SHIFT, 23}, {10, SHIFT, 24}, {11, SHIFT, 25}, {12, SHIFT, 26}, {13, SHIFT, 27}, {16, SHIFT, 54}, {17, SHIFT, 55}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 55}, {15, SHIFT, 1}, {18, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {23, SHIFT, 7}, {24, SHIFT, 8}, {25, SHIFT, 9}, },
			{{-1, ERROR, 56}, {3, SHIFT, 17}, {4, SHIFT, 18}, {5, SHIFT, 19}, {6, SHIFT, 20}, {7, SHIFT, 21}, {8, SHIFT, 22}, {9, SHIFT, 23}, {10, SHIFT, 24}, {11, SHIFT, 25}, {12, SHIFT, 26}, {13, SHIFT, 27}, {16, SHIFT, 57}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 10}, },
			{{-1, 11}, {1, 15}, {16, 34}, {52, 53}, {55, 56}, },
			{{-1, 12}, {17, 35}, {18, 36}, {19, 37}, {20, 38}, {21, 39}, {22, 40}, {23, 41}, {24, 42}, {25, 43}, {26, 44}, {27, 45}, },
			{{-1, 13}, {29, 48}, {30, 49}, {31, 50}, },
			{{-1, 14}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '(', integer2, integer8, integer10, integer16, float, fraction, identifier, obj identifier",
			"expecting: '*', '/', '%', '+', '-', '=', '<>', '<', '<=', '>', '>=', '&', '|', '^', '->', ')', ',', EOF",
			"expecting: '*', '/', '%', '+', '-', '=', '<>', '<', '<=', '>', '>=', '&', '|', '^', '->', '(', ')', ',', EOF",
			"expecting: EOF",
			"expecting: '+', '-', '=', '<>', '<', '<=', '>', '>=', '&', '|', '^', '->', EOF",
			"expecting: '+', '-', '=', '<>', '<', '<=', '>', '>=', '&', '|', '^', ')'",
			"expecting: '(', ')', integer2, integer8, integer10, integer16, float, fraction, identifier, obj identifier",
			"expecting: identifier, obj identifier",
			"expecting: '+', '-', '=', '<>', '<', '<=', '>', '>=', '&', '|', '^', ')', ','",
        };*/
    private static int[] errors;
/*      {
			0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 3, 4, 1, 1, 1, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 0, 8, 1, 0, 5, 1, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
