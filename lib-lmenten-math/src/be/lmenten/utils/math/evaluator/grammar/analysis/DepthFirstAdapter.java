/* This file was generated by SableCC (http://www.sablecc.org/). */

package be.lmenten.utils.math.evaluator.grammar.analysis;

import java.util.*;
import be.lmenten.utils.math.evaluator.grammar.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExp().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAAssignVarExp(AAssignVarExp node)
    {
        defaultIn(node);
    }

    public void outAAssignVarExp(AAssignVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignVarExp(AAssignVarExp node)
    {
        inAAssignVarExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAssignVarExp(node);
    }

    public void inAAssignObjExp(AAssignObjExp node)
    {
        defaultIn(node);
    }

    public void outAAssignObjExp(AAssignObjExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignObjExp(AAssignObjExp node)
    {
        inAAssignObjExp(node);
        if(node.getObjIdentifier() != null)
        {
            node.getObjIdentifier().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAssignObjExp(node);
    }

    public void inAAddExp(AAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddExp(AAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExp(AAddExp node)
    {
        inAAddExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAddExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubExp(node);
    }

    public void inAMulExp(AMulExp node)
    {
        defaultIn(node);
    }

    public void outAMulExp(AMulExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExp(AMulExp node)
    {
        inAMulExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMulExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModExp(node);
    }

    public void inAEqualExp(AEqualExp node)
    {
        defaultIn(node);
    }

    public void outAEqualExp(AEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExp(AEqualExp node)
    {
        inAEqualExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEqualExp(node);
    }

    public void inANotEqualExp(ANotEqualExp node)
    {
        defaultIn(node);
    }

    public void outANotEqualExp(ANotEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualExp(ANotEqualExp node)
    {
        inANotEqualExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANotEqualExp(node);
    }

    public void inALThanExp(ALThanExp node)
    {
        defaultIn(node);
    }

    public void outALThanExp(ALThanExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALThanExp(ALThanExp node)
    {
        inALThanExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALThanExp(node);
    }

    public void inALEqualExp(ALEqualExp node)
    {
        defaultIn(node);
    }

    public void outALEqualExp(ALEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALEqualExp(ALEqualExp node)
    {
        inALEqualExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALEqualExp(node);
    }

    public void inAGThanExp(AGThanExp node)
    {
        defaultIn(node);
    }

    public void outAGThanExp(AGThanExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGThanExp(AGThanExp node)
    {
        inAGThanExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGThanExp(node);
    }

    public void inAGEqualExp(AGEqualExp node)
    {
        defaultIn(node);
    }

    public void outAGEqualExp(AGEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGEqualExp(AGEqualExp node)
    {
        inAGEqualExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGEqualExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAndExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOrExp(node);
    }

    public void inAXorExp(AXorExp node)
    {
        defaultIn(node);
    }

    public void outAXorExp(AXorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExp(AXorExp node)
    {
        inAXorExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAXorExp(node);
    }

    public void inAGetterExp(AGetterExp node)
    {
        defaultIn(node);
    }

    public void outAGetterExp(AGetterExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGetterExp(AGetterExp node)
    {
        inAGetterExp(node);
        if(node.getObjIdentifier() != null)
        {
            node.getObjIdentifier().apply(this);
        }
        outAGetterExp(node);
    }

    public void inAFunc0Exp(AFunc0Exp node)
    {
        defaultIn(node);
    }

    public void outAFunc0Exp(AFunc0Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunc0Exp(AFunc0Exp node)
    {
        inAFunc0Exp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFunc0Exp(node);
    }

    public void inAFunc1Exp(AFunc1Exp node)
    {
        defaultIn(node);
    }

    public void outAFunc1Exp(AFunc1Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunc1Exp(AFunc1Exp node)
    {
        inAFunc1Exp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAFunc1Exp(node);
    }

    public void inAFunc2Exp(AFunc2Exp node)
    {
        defaultIn(node);
    }

    public void outAFunc2Exp(AFunc2Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunc2Exp(AFunc2Exp node)
    {
        inAFunc2Exp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAFunc2Exp(node);
    }

    public void inAFunc3Exp(AFunc3Exp node)
    {
        defaultIn(node);
    }

    public void outAFunc3Exp(AFunc3Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunc3Exp(AFunc3Exp node)
    {
        inAFunc3Exp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getCenter() != null)
        {
            node.getCenter().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAFunc3Exp(node);
    }

    public void inAInteger2Exp(AInteger2Exp node)
    {
        defaultIn(node);
    }

    public void outAInteger2Exp(AInteger2Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteger2Exp(AInteger2Exp node)
    {
        inAInteger2Exp(node);
        if(node.getInteger2() != null)
        {
            node.getInteger2().apply(this);
        }
        outAInteger2Exp(node);
    }

    public void inAInteger8Exp(AInteger8Exp node)
    {
        defaultIn(node);
    }

    public void outAInteger8Exp(AInteger8Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteger8Exp(AInteger8Exp node)
    {
        inAInteger8Exp(node);
        if(node.getInteger8() != null)
        {
            node.getInteger8().apply(this);
        }
        outAInteger8Exp(node);
    }

    public void inAInteger10Exp(AInteger10Exp node)
    {
        defaultIn(node);
    }

    public void outAInteger10Exp(AInteger10Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteger10Exp(AInteger10Exp node)
    {
        inAInteger10Exp(node);
        if(node.getInteger10() != null)
        {
            node.getInteger10().apply(this);
        }
        outAInteger10Exp(node);
    }

    public void inAInteger16Exp(AInteger16Exp node)
    {
        defaultIn(node);
    }

    public void outAInteger16Exp(AInteger16Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteger16Exp(AInteger16Exp node)
    {
        inAInteger16Exp(node);
        if(node.getInteger16() != null)
        {
            node.getInteger16().apply(this);
        }
        outAInteger16Exp(node);
    }

    public void inAFloatExp(AFloatExp node)
    {
        defaultIn(node);
    }

    public void outAFloatExp(AFloatExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatExp(AFloatExp node)
    {
        inAFloatExp(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatExp(node);
    }

    public void inAFractionExp(AFractionExp node)
    {
        defaultIn(node);
    }

    public void outAFractionExp(AFractionExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFractionExp(AFractionExp node)
    {
        inAFractionExp(node);
        if(node.getFraction() != null)
        {
            node.getFraction().apply(this);
        }
        outAFractionExp(node);
    }

    public void inAValueExp(AValueExp node)
    {
        defaultIn(node);
    }

    public void outAValueExp(AValueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueExp(AValueExp node)
    {
        inAValueExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAValueExp(node);
    }

    public void inAParenExp(AParenExp node)
    {
        defaultIn(node);
    }

    public void outAParenExp(AParenExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenExp(AParenExp node)
    {
        inAParenExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAParenExp(node);
    }
}
