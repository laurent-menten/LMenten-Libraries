/* ************************************************************************* *
 * * * * * * * * * JMathParser ** (c) 2022+ Laurent Menten * * * * * * * * * *
 * ************************************************************************* *
 *  This program is free software: you can redistribute it and/or modify     *
 *  it under the terms of the GNU General Public License as published by     *
 *  the Free Software Foundation, either version 3 of the License, or        *
 *  (at your option) any later version.                                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public License        *
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.   *
 *                                                                           *
 * ************************************************************************* *
 *                                                                           *
 * This file has been written for SableCC 3.7 and may not be compatible with *
 * any other version of that tool.                                           *
 *                                                                           *
 * ************************************************************************* *
 * @author <a href="mailto:laurent.menten@gmail.com">Laurent Menten<a>       *
 * @version 1.0                                                              *
 * @since 1.0 - 2022/01/24                                                   *
 * ************************************************************************* *
 * Features:                                                                 *
 *                                                                           *
 * 	       math + - * / % ()                                                 *
 *	      logic = <> < <= > >= & | ^                                         *
 *	assignation ->                                                           *
 *                                                                           *
 *	bin, oct, dec and hex numbers                                            *
 *	floating point numbers                                                   *
 *	fractions (ex. 1#3#8 represents 1 3/8)                                   *
 *                                                                           *
 *  builtin constants (true, false, NaN, pi, e ...)                          *
 *	user defined constants                                                   *
 *  builtin variable (ans for last result)                                   *
 *	user defined variables                                                   *
 *                                                                           *
 * Access to getters and setters for properties of type double in a set of   *
 * named objects of arbitrary type. name.property resolves to either         *
 * double object.getProperty() or object.setProperty( double value ) method. *
 *                                                                           *
 *  builtin functions from java.lang.Math                                    *
 *	user functions (overloadable 0, 1, 2 or 3 parameters of double type)     *
 * ************************************************************************* */


Package be.lmenten.utils.math.evaluator.grammar;

// ============================================================================
// = Helpers ==================================================================
// ============================================================================

Helpers

	// ------------------------------------------------------------------------
	// - Unicode characters ---------------------------------------------------
	// ------------------------------------------------------------------------

	unicode_all		= [0 .. 0xffff] ;

	unicode_letter	= [0x0041..0x005a] | [0x0061..0x007a] | [0x00aa..0x00aa]
					| [0x00b5..0x00b5] | [0x00ba..0x00ba] | [0x00c0..0x00d6]
					| [0x00d8..0x00f6] | [0x00f8..0x01f5] | [0x01fa..0x0217]
					| [0x0250..0x02a8] | [0x02b0..0x02b8] | [0x02bb..0x02c1]
					| [0x02d0..0x02d1] | [0x02e0..0x02e4] | [0x037a..0x037a]
					| [0x0386..0x0386] | [0x0388..0x038a] | [0x038c..0x038c]
					| [0x038e..0x03a1] | [0x03a3..0x03ce] | [0x03d0..0x03d6]
					| [0x03da..0x03da] | [0x03dc..0x03dc] | [0x03de..0x03de]
					| [0x03e0..0x03e0] | [0x03e2..0x03f3] | [0x0401..0x040c]
					| [0x040e..0x044f] | [0x0451..0x045c] | [0x045e..0x0481]
					| [0x0490..0x04c4] | [0x04c7..0x04c8] | [0x04cb..0x04cc]
					| [0x04d0..0x04eb] | [0x04ee..0x04f5] | [0x04f8..0x04f9]
					| [0x0531..0x0556] | [0x0559..0x0559] | [0x0561..0x0587]
					| [0x05d0..0x05ea] | [0x05f0..0x05f2] | [0x0621..0x063a]
					| [0x0640..0x064a] | [0x0671..0x06b7] | [0x06ba..0x06be]
					| [0x06c0..0x06ce] | [0x06d0..0x06d3] | [0x06d5..0x06d5]
					| [0x06e5..0x06e6] | [0x0905..0x0939] | [0x093d..0x093d]
					| [0x0958..0x0961] | [0x0985..0x098c] | [0x098f..0x0990]
					| [0x0993..0x09a8] | [0x09aa..0x09b0] | [0x09b2..0x09b2]
					| [0x09b6..0x09b9] | [0x09dc..0x09dd] | [0x09df..0x09e1]
					| [0x09f0..0x09f1] | [0x0a05..0x0a0a] | [0x0a0f..0x0a10]
					| [0x0a13..0x0a28] | [0x0a2a..0x0a30] | [0x0a32..0x0a33]
					| [0x0a35..0x0a36] | [0x0a38..0x0a39] | [0x0a59..0x0a5c]
					| [0x0a5e..0x0a5e] | [0x0a72..0x0a74] | [0x0a85..0x0a8b]
					| [0x0a8d..0x0a8d] | [0x0a8f..0x0a91] | [0x0a93..0x0aa8]
					| [0x0aaa..0x0ab0] | [0x0ab2..0x0ab3] | [0x0ab5..0x0ab9]
					| [0x0abd..0x0abd] | [0x0ae0..0x0ae0] | [0x0b05..0x0b0c]
					| [0x0b0f..0x0b10] | [0x0b13..0x0b28] | [0x0b2a..0x0b30]
					| [0x0b32..0x0b33] | [0x0b36..0x0b39] | [0x0b3d..0x0b3d]
					| [0x0b5c..0x0b5d] | [0x0b5f..0x0b61] | [0x0b85..0x0b8a]
					| [0x0b8e..0x0b90] | [0x0b92..0x0b95] | [0x0b99..0x0b9a]
					| [0x0b9c..0x0b9c] | [0x0b9e..0x0b9f] | [0x0ba3..0x0ba4]
					| [0x0ba8..0x0baa] | [0x0bae..0x0bb5] | [0x0bb7..0x0bb9]
					| [0x0c05..0x0c0c] | [0x0c0e..0x0c10] | [0x0c12..0x0c28]
					| [0x0c2a..0x0c33] | [0x0c35..0x0c39] | [0x0c60..0x0c61]
					| [0x0c85..0x0c8c] | [0x0c8e..0x0c90] | [0x0c92..0x0ca8]
					| [0x0caa..0x0cb3] | [0x0cb5..0x0cb9] | [0x0cde..0x0cde]
					| [0x0ce0..0x0ce1] | [0x0d05..0x0d0c] | [0x0d0e..0x0d10]
					| [0x0d12..0x0d28] | [0x0d2a..0x0d39] | [0x0d60..0x0d61]
					| [0x0e01..0x0e2e] | [0x0e30..0x0e30] | [0x0e32..0x0e33]
					| [0x0e40..0x0e46] | [0x0e81..0x0e82] | [0x0e84..0x0e84]
					| [0x0e87..0x0e88] | [0x0e8a..0x0e8a] | [0x0e8d..0x0e8d]
					| [0x0e94..0x0e97] | [0x0e99..0x0e9f] | [0x0ea1..0x0ea3]
					| [0x0ea5..0x0ea5] | [0x0ea7..0x0ea7] | [0x0eaa..0x0eab]
					| [0x0ead..0x0eae] | [0x0eb0..0x0eb0] | [0x0eb2..0x0eb3]
					| [0x0ebd..0x0ebd] | [0x0ec0..0x0ec4] | [0x0ec6..0x0ec6]
					| [0x0edc..0x0edd] | [0x0f40..0x0f47] | [0x0f49..0x0f69]
					| [0x10a0..0x10c5] | [0x10d0..0x10f6] | [0x1100..0x1159]
					| [0x115f..0x11a2] | [0x11a8..0x11f9] | [0x1e00..0x1e9b]
					| [0x1ea0..0x1ef9] | [0x1f00..0x1f15] | [0x1f18..0x1f1d]
					| [0x1f20..0x1f45] | [0x1f48..0x1f4d] | [0x1f50..0x1f57]
					| [0x1f59..0x1f59] | [0x1f5b..0x1f5b] | [0x1f5d..0x1f5d]
					| [0x1f5f..0x1f7d] | [0x1f80..0x1fb4] | [0x1fb6..0x1fbc]
					| [0x1fbe..0x1fbe] | [0x1fc2..0x1fc4] | [0x1fc6..0x1fcc]
					| [0x1fd0..0x1fd3] | [0x1fd6..0x1fdb] | [0x1fe0..0x1fec]
					| [0x1ff2..0x1ff4] | [0x1ff6..0x1ffc] | [0x207f..0x207f]
					| [0x2102..0x2102] | [0x2107..0x2107] | [0x210a..0x2113]
					| [0x2115..0x2115] | [0x2118..0x211d] | [0x2124..0x2124]
					| [0x2126..0x2126] | [0x2128..0x2128] | [0x212a..0x2131]
					| [0x2133..0x2138] | [0x3005..0x3005] | [0x3031..0x3035]
					| [0x3041..0x3094] | [0x309b..0x309e] | [0x30a1..0x30fa]
					| [0x30fc..0x30fe] | [0x3105..0x312c] | [0x3131..0x318e]
					| [0x4e00..0x9fa5] | [0xac00..0xd7a3] | [0xf900..0xfa2d]
					| [0xfb00..0xfb06] | [0xfb13..0xfb17] | [0xfb1f..0xfb28]
					| [0xfb2a..0xfb36] | [0xfb38..0xfb3c] | [0xfb3e..0xfb3e]
					| [0xfb40..0xfb41] | [0xfb43..0xfb44] | [0xfb46..0xfbb1]
					| [0xfbd3..0xfd3d] | [0xfd50..0xfd8f] | [0xfd92..0xfdc7]
					| [0xfdf0..0xfdfb] | [0xfe70..0xfe72] | [0xfe74..0xfe74]
					| [0xfe76..0xfefc] | [0xff21..0xff3a] | [0xff41..0xff5a]
					| [0xff66..0xffbe] | [0xffc2..0xffc7] | [0xffca..0xffcf]
					| [0xffd2..0xffd7] | [0xffda..0xffdc]
					;

	unicode_digit	= [0x0030..0x0039] | [0x0660..0x0669] | [0x06f0..0x06f9]
					| [0x0966..0x096f] | [0x09e6..0x09ef] | [0x0a66..0x0a6f]
					| [0x0ae6..0x0aef] | [0x0b66..0x0b6f] | [0x0be7..0x0bef]
					| [0x0c66..0x0c6f] | [0x0ce6..0x0cef] | [0x0d66..0x0d6f]
					| [0x0e50..0x0e59] | [0x0ed0..0x0ed9] | [0x0f20..0x0f29]
					| [0xff10..0xff19]
					;

	// ------------------------------------------------------------------------
	// - Characters -----------------------------------------------------------
	// ------------------------------------------------------------------------

	a					= 'a' | 'A' ;
	b					= 'b' | 'B' ;
	c					= 'c' | 'C' ;
	d					= 'd' | 'D' ;
	e					= 'e' | 'E' ;
	f					= 'f' | 'F' ;
	g					= 'g' | 'G' ;
	h					= 'h' | 'H' ;
	i					= 'i' | 'I' ;
	j					= 'j' | 'J' ;
	k					= 'k' | 'K' ;
	l					= 'l' | 'L' ;
	m					= 'm' | 'M' ;
	n					= 'n' | 'N' ;
	o					= 'o' | 'O' ;
	p					= 'p' | 'P' ;
	q					= 'q' | 'Q' ;
	r					= 'r' | 'R' ;
	s					= 's' | 'S' ;
	t					= 't' | 'T' ;
	u					= 'u' | 'U' ;
	v					= 'v' | 'V' ;
	w					= 'w' | 'W' ;
	x					= 'x' | 'X' ;
	y					= 'y' | 'Y' ;
	z					= 'z' | 'Z' ;

	// ------------------------------------------------------------------------
	// - Special characters ---------------------------------------------------
	// ------------------------------------------------------------------------

	lf				    = 10 ;
	ff				    = 12 ;
	cr				    = 13 ;
	eol				    = (cr lf) | cr | lf ;

	tab				    = 9 ;
	space			    = ' ' ;
	blank			    = (space | tab)+ ;

	// ------------------------------------------------------------------------
	// - Letters --------------------------------------------------------------
	// ------------------------------------------------------------------------

	letter			    = unicode_letter ;
	letter_digit	    = unicode_letter | unicode_digit ;

	// ------------------------------------------------------------------------
	// - Digits ---------------------------------------------------------------
	// ------------------------------------------------------------------------

	uppercase_hex	    = ['A' .. 'F'] ;
	lowercase_hex	    = ['a' .. 'f'] ;

	digit2			    = ['0' .. '1'] ;
	digit8			    = ['0' .. '7'] ;
	digit10_not0	    = ['1' .. '9'] ;
	digit10			    = ['0' .. '9'] ;
	digit16			    = [digit10 + [uppercase_hex + lowercase_hex]] ;

	// ------------------------------------------------------------------------
	// - Numbers --------------------------------------------------------------
	// ------------------------------------------------------------------------

	integer16		    = '0' ('x'|'X') ('_' | digit16*)* digit16
						| '$' ('_' | digit16*)* digit16
						| '#' ('_' | digit16*)* digit16
						| digit10 ('h'|'H')
						| digit10 ('_' | digit16*)* digit16+ ('h'|'H')
						;

	integer10_ns        = '0'
						| digit10_not0
						| digit10_not0 ('_' | digit10*)* digit10+
						;

	integer10		    = '-'? integer10_ns
						;

	integer8		    = '0' ('_' | digit8*)* digit8+
						;

	integer2		    = '0' ('b'|'B') ('_' | digit2*)* digit2
						| digit2 ('_' | digit2*)* digit2 ('b'|'B')
						;

	// ------------------------------------------------------------------------

	float			    = '-'? digit10+  '.' digit10*
						| '-'? '.' digit10+
						;

	fraction            = integer10 '#' integer10_ns
						| integer10 '#' integer10_ns '#' integer10_ns
						;

	// ------------------------------------------------------------------------
	// - Identifiers ----------------------------------------------------------
	// ------------------------------------------------------------------------

	identifier		    = '-'? letter ('_' | letter_digit)*
						| '-'? ('_' | letter_digit)*
						;

	obj_identifier		= '-'? identifier '.' identifier ;

	// ------------------------------------------------------------------------
	// - Keywords -------------------------------------------------------------
	// ------------------------------------------------------------------------

	const				= c o n s t ;
	var					= v a r ;
	delete				= d e l e t e ;

// ============================================================================
// = Tokens ===================================================================
// ============================================================================

Tokens

	// ------------------------------------------------------------------------
	// - Special characters ---------------------------------------------------
	// ------------------------------------------------------------------------

	blank			    = blank ;

	// ------------------------------------------------------------------------
	// - Operators ------------------------------------------------------------
	// ------------------------------------------------------------------------

	op_multiply		    = '*' ;
	op_divide		    = '/' ;
	op_modulo		    = '%' ;
	op_plus			    = '+' ;
	op_minus		    = '-' ;

	op_equal		    = '=' ;
	op_not_equal	    = '<>' ;
	op_l_than		    = '<' ;
	op_l_equal		    = '<=' ;
	op_g_than		    = '>' ;
	op_g_equal		    = '>=' ;

	op_and	    		= '&' ;
	op_or	   		 	= '|' ;
	op_xor			    = '^' ;

	op_assign			= '->' ;

	// ------------------------------------------------------------------------
	// - Characters -----------------------------------------------------------
	// ------------------------------------------------------------------------

	l_par			    = '(' ;
	r_par			    = ')' ;

	comma               = ',' ;

	// ------------------------------------------------------------------------
	// - Numbers --------------------------------------------------------------
	// ------------------------------------------------------------------------

	integer2            = integer2 ;
	integer8            = integer8 ;
	integer10           = integer10 ;
	integer16           = integer16 ;

	// ------------------------------------------------------------------------

	float               = float ;
	fraction            = fraction ;

	// ------------------------------------------------------------------------
	// - Identifiers ----------------------------------------------------------
	// ------------------------------------------------------------------------

	identifier		    = identifier ;
	obj_identifier		= obj_identifier ;

	// ------------------------------------------------------------------------
	// - Keywords -------------------------------------------------------------
	// ------------------------------------------------------------------------

	const				= const ;
	var					= var ;
	delete				= delete ;

// ============================================================================
// = Ignored tokens ===========================================================
// ============================================================================

Ignored Tokens

	blank
	;

// ============================================================================
// = Productions ==============================================================
// ============================================================================

Productions

	expression { -> exp }

		= {simple}		exp
						{
							-> exp.exp
						}

		| {assign_var}	exp op_assign identifier
						{
							-> New exp.assign_var( identifier, exp )
						}

		| {assign_obj}	exp op_assign obj_identifier
						{
							-> New exp.assign_obj( obj_identifier, exp )
						}
/*
		| {const}		const exp op_assign identifier
						{
							-> New exp.const( identifier, exp )
						}

		| {var}			var exp op_assign identifier
						{
							-> New exp.var( identifier, exp )
						}

		| {delete}		delete identifier
						{
							-> New exp.delete( identifier )
						}
*/
		;

	exp { -> exp }

		= {add}		    [left]:exp op_plus [right]:factor
						{
							-> New exp.add( left, right.exp )
						}

		| {sub}		    [left]:exp op_minus [right]:factor
						{
							-> New exp.sub( left, right.exp )
						}

		| {equal}		[left]:exp op_equal [right]:factor
                        {
                        	-> New exp.equal( left, right.exp )
   						}

		| {not_equal}	[left]:exp op_not_equal [right]:factor
                        {
                        	-> New exp.not_equal( left, right.exp )
   						}

		| {l_than}		[left]:exp op_l_than [right]:factor
                        {
                        	-> New exp.l_than( left, right.exp )
   						}

		| {l_equal}		[left]:exp op_l_equal [right]:factor
                        {
                        	-> New exp.l_equal( left, right.exp )
   						}

		| {g_than}		[left]:exp op_g_than [right]:factor
                        {
                        	-> New exp.g_than( left, right.exp )
   						}

		| {g_equal}		[left]:exp op_g_equal [right]:factor
                        {
                        	-> New exp.g_equal( left, right.exp )
   						}

		| {and}			[left]:exp op_and [right]:factor
                        {
                        	-> New exp.and( left, right.exp )
   						}

		| {or}			[left]:exp op_or [right]:factor
                        {
                        	-> New exp.or( left, right.exp )
   						}

		| {xor}			[left]:exp op_xor [right]:factor
                        {
                        	-> New exp.xor( left, right.exp )
   						}

		| {factor}	    factor
						{
							-> factor.exp
						}
		;

// ----------------------------------------------------------------------------

	factor { -> exp }

		= {mul}		    [left]:factor op_multiply [right]:unary
						{
							-> New exp.mul( left.exp, right.exp )
						}

		| {div}		    [left]:factor op_divide [right]:unary
						{
							-> New exp.div( left.exp, right.exp )
						}

		| {mod}		    [left]:factor op_modulo [right]:unary
						{
							-> New exp.mod( left.exp, right.exp )
						}

		| {unary}	    unary
						{
							-> unary.exp
						}
		;

// ----------------------------------------------------------------------------

	unary { -> exp }

		= {literal}	    literal
						{
							-> literal.exp
						}

		| {value}       identifier
						{
							-> New exp.value( identifier )
						}

		| {paren}	    l_par exp r_par
						{
							-> New exp.paren( exp )
						}

		| {getter}      obj_identifier
						{
							-> New exp.getter( obj_identifier )
						}

		| {func0}	    identifier l_par r_par
						{
							-> New exp.func0( identifier )
						}

		| {func1}	    identifier l_par exp r_par
						{
							-> New exp.func1( identifier, exp )
						}

		| {func2}	    identifier l_par [left]:exp comma [right]:exp r_par
						{
							-> New exp.func2( identifier, left.exp, right.exp )
						}

		| {func3}	    identifier l_par [left]:exp [c1]:comma [center]:exp [c2]:comma [right]:exp r_par
						{
							-> New exp.func3( identifier, left.exp, center.exp, right.exp )
						}
		;

// ----------------------------------------------------------------------------
// - Literals -----------------------------------------------------------------
// ----------------------------------------------------------------------------

	literal { -> exp }

		= {int2}        integer2
						{
							-> New exp.integer2( integer2 )
						}

		| {int8}        integer8
						{
							-> New exp.integer8( integer8 )
						}

		| {int10}       integer10
						{
							-> New exp.integer10( integer10 )
						}

		| {int16}       integer16
						{
							-> New exp.integer16( integer16 )
						}

		| {float}       float
						{
							-> New exp.float( float )
						}

		| {fraction}       fraction
						{
							-> New exp.fraction( fraction )
						}
		;

// ============================================================================
// = Abstract Syntax Tree =====================================================
// ============================================================================

Abstract Syntax Tree
	exp
		= {assign_var}	identifier exp
		| {assign_obj}	obj_identifier exp
/*
		| {const}		identifier exp
		| {var}			identifier exp
		| {delete}		identifier
*/
		| {add}			[left]:exp [right]:exp
		| {sub}			[left]:exp [right]:exp
		| {mul}			[left]:exp [right]:exp
		| {div}			[left]:exp [right]:exp
		| {mod}			[left]:exp [right]:exp

		| {equal}		[left]:exp [right]:exp
		| {not_equal}	[left]:exp [right]:exp
		| {l_than}		[left]:exp [right]:exp
		| {l_equal}		[left]:exp [right]:exp
		| {g_than}		[left]:exp [right]:exp
		| {g_equal}		[left]:exp [right]:exp

		| {and}			[left]:exp [right]:exp
		| {or}			[left]:exp [right]:exp
		| {xor}			[left]:exp [right]:exp

		| {getter}		obj_identifier

        | {func0}		identifier
        | {func1}		identifier exp
        | {func2}		identifier [left]:exp [right]:exp
        | {func3}		identifier [left]:exp [center]:exp [right]:exp

		| {integer2}    integer2
		| {integer8}    integer8
		| {integer10}   integer10
		| {integer16}   integer16
		| {float}       float
		| {fraction}    fraction

		| {value}	    identifier

		| {paren}		exp
		;
